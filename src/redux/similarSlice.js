import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { getSimilar } from "../tmdb";

export const fetchMostSimilar = createAsyncThunk(
    "similar/fetchMostSimilar",
    async ({ id, type }) => {
        console.log("‚è≥ –í—ã–∑–≤–∞–Ω fetchMostSimilar:", id, type); // –õ–æ–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º

        try {
            const similarMovies = await getSimilar(id, type);
            const similarMoviesFiltered = similarMovies
            .filter(movie => movie.vote_count > 15)
            .sort((a, b) => b.vote_average - a.vote_average);
            console.log("üîç –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã:", similarMovies);
            console.log("üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:", similarMoviesFiltered);
            console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Redux:", similarMoviesFiltered);
            
            return similarMoviesFiltered
                
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤:`, err);
            return [];
        }
    }
);


const similarSlice = createSlice({
    name: "similar",
    initialState: {
        similar: [], // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –º–∞—Å—Å–∏–≤, –∞ –Ω–µ undefined
    },
    reducers: {},
    extraReducers: (builder) => {
        builder.addCase(fetchMostSimilar.fulfilled, (state, action) => {
            console.log("üü¢ Redux –æ–±–Ω–æ–≤–∏–ª similar:", action.payload);
            state.similar = action.payload; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏ Redux –¥–∞–Ω–Ω—ã–µ
        });
    }
});


export default similarSlice;
